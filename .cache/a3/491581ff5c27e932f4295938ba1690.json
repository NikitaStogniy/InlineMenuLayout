{"id":"tn5Z","dependencies":[{"name":"/Users/milic/GitHub/InlineMenuLayout/package.json","includedInParent":true,"mtime":1605092238000},{"name":"gsap","loc":{"line":1,"column":21},"parent":"/Users/milic/GitHub/InlineMenuLayout/src/js/menuController.js","resolved":"/Users/milic/GitHub/InlineMenuLayout/node_modules/gsap/index.js"},{"name":"./menuItem","loc":{"line":2,"column":21},"parent":"/Users/milic/GitHub/InlineMenuLayout/src/js/menuController.js","resolved":"/Users/milic/GitHub/InlineMenuLayout/src/js/menuItem.js"},{"name":"./contentItem","loc":{"line":3,"column":24},"parent":"/Users/milic/GitHub/InlineMenuLayout/src/js/menuController.js","resolved":"/Users/milic/GitHub/InlineMenuLayout/src/js/contentItem.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _gsap = require(\"gsap\");\n\nvar _menuItem = _interopRequireDefault(require(\"./menuItem\"));\n\nvar _contentItem = _interopRequireDefault(require(\"./contentItem\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MenuController = /*#__PURE__*/function () {\n  function MenuController(menuEl) {\n    var _this = this;\n\n    _classCallCheck(this, MenuController);\n\n    this.DOM = {\n      menu: menuEl\n    }; // Menu item elements\n\n    this.DOM.menuItems = _toConsumableArray(this.DOM.menu.querySelectorAll('.menu__item')); // Menu item properties that will animate as we move the mouse around the menu\n    // we will be using interpolation to achieve smooth animations. \n    // the “previous” and “current” values are the values to interpolate. \n    // the value applied to the element, this case the image element (this.DOM.reveal) will be a value between these two values at a specific increment. \n    // the amt is the amount to interpolate.\n\n    this.animatableProperties = {\n      // translationX\n      tx: {\n        previous: 0,\n        current: 0,\n        amt: 0.08\n      },\n      // translationY\n      ty: {\n        previous: 0,\n        current: 0,\n        amt: 0.08\n      },\n      // Rotation angle\n      rotation: {\n        previous: 0,\n        current: 0,\n        amt: 0.05\n      }\n    }; // Array for the MenuItem instances\n\n    this.menuItems = [];\n    this.DOM.menuItems.forEach(function (menuItemEl) {\n      return _this.menuItems.push(new _menuItem.default(menuItemEl, _this.animatableProperties));\n    }); // Array for the ContentItem instances\n\n    this.contentItems = [];\n\n    _toConsumableArray(document.querySelectorAll('.content-wrap .content')).forEach(function (contentItemEl) {\n      return _this.contentItems.push(new _contentItem.default(contentItemEl));\n    }); // \"show/back to menu\" control\n\n\n    this.DOM.backCtrl = document.querySelector('.back');\n    this.initEvents();\n  }\n\n  _createClass(MenuController, [{\n    key: \"initEvents\",\n    value: function initEvents() {\n      var _this2 = this;\n\n      // click the menu item shows the content elements associated to this item\n      this.DOM.menuItems.forEach(function (menuItemEl, position) {\n        menuItemEl.addEventListener('click', function () {\n          return _this2.onMenuItemClick(position);\n        });\n      }); // click the back control shows back the menu\n\n      this.DOM.backCtrl.addEventListener('click', function () {\n        return _this2.onBackCtrlClick();\n      });\n    } // gets the menu item (and its texts and number elements) and content item given a specific position/index\n\n  }, {\n    key: \"getCurrentData\",\n    value: function getCurrentData(position) {\n      return {\n        menuItem: this.menuItems[position],\n        // all menu item's texts and numbers\n        texts: this.menuItems.map(function (t) {\n          return t.DOM.inner;\n        }),\n        numbers: this.menuItems.map(function (t) {\n          return t.DOM.number;\n        }),\n        // ...and its contentItem  \n        contentItem: this.contentItems[position]\n      };\n    }\n  }, {\n    key: \"onMenuItemClick\",\n    value: function onMenuItemClick(position) {\n      // save the position of the menu item\n      this.currentItemIndex = position; // get elements for this position\n\n      var _this$getCurrentData = this.getCurrentData(position),\n          menuItem = _this$getCurrentData.menuItem,\n          texts = _this$getCurrentData.texts,\n          numbers = _this$getCurrentData.numbers,\n          contentItem = _this$getCurrentData.contentItem; // change pointer events so we can't hover on the menu\n\n\n      this.DOM.menu.style.pointerEvents = 'none';\n      menuItem.DOM.el.style.pointerEvents = 'auto';\n      menuItem.hideImage().then(function () {\n        return menuItem.DOM.el.style.pointerEvents = 'none';\n      }); // animate/hide all the menu items (texts and numbers)\n\n      _gsap.gsap.timeline({\n        defaults: {\n          duration: 1,\n          ease: 'expo'\n        }\n      }).addLabel('hideMenu', 0) // set transform origin value for both the texts and content tile elements\n      .set([texts, contentItem.DOM.title], {\n        transformOrigin: '50% 100%'\n      }, 'hideMenu') // set the content elements starting style\n      .set(contentItem.DOM.title, {\n        opacity: 0,\n        y: '101%'\n      }, 'hideMenu').set(contentItem.DOM.number, {\n        scale: 0\n      }, 'hideMenu').set(contentItem.DOM.imgs, {\n        y: '101%'\n      }, 'hideMenu').set([contentItem.DOM.caption.title, contentItem.DOM.caption.meta, contentItem.DOM.caption.more], {\n        opacity: 0\n      }, 'hideMenu') // small numbers next to text\n      .to(numbers, {\n        duration: 0.3,\n        ease: 'sine',\n        scale: 0,\n        opacity: 0,\n        stagger: {\n          from: position,\n          each: 0.01\n        }\n      }, 'hideMenu') // all menu items texts\n      .to(texts, {\n        duration: 0.1,\n        ease: 'quad.in',\n        scaleY: 1.5,\n        stagger: {\n          from: position,\n          each: 0.01\n        }\n      }, 'hideMenu').to(texts, {\n        duration: 0.8,\n        ease: 'expo',\n        scaleY: 1,\n        y: '-100%',\n        opacity: 0,\n        stagger: {\n          from: position,\n          each: 0.01\n        }\n      }, 'hideMenu+=0.1') // add class content--current to the content element so it becomes visible\n      .addLabel('showContent', 0.3) // add class current\n      .add(function () {\n        contentItem.DOM.el.classList.add('content--current');\n      }, 'showContent') // back control\n      .set(this.DOM.backCtrl, {\n        pointerEvents: 'auto'\n      }, 'showContent').to(this.DOM.backCtrl, {\n        startAt: {\n          x: '-100%'\n        },\n        opacity: 1,\n        x: '0%'\n      }, 'showContent').to(contentItem.DOM.title, {\n        duration: 0.1,\n        ease: 'quad.in',\n        scaleY: 1.5,\n        opacity: 1\n      }, 'showContent').to(contentItem.DOM.title, {\n        duration: 0.8,\n        ease: 'expo',\n        scaleY: 1,\n        startAt: {\n          y: '100%'\n        },\n        y: '0%'\n      }, 'showContent+=0.1').to(contentItem.DOM.number, {\n        scale: 1\n      }, 'showContent').to(contentItem.DOM.imgs, {\n        y: '0%',\n        stagger: 0.02\n      }, 'showContent+=0.1').to([contentItem.DOM.caption.title, contentItem.DOM.caption.meta], {\n        startAt: {\n          y: '100%'\n        },\n        y: '0%',\n        opacity: 1,\n        stagger: 0.02\n      }, 'showContent+=0.2').to(contentItem.DOM.caption.more, {\n        startAt: {\n          scale: 0\n        },\n        scale: 1,\n        opacity: 1,\n        stagger: 0.02\n      }, 'showContent+=0.2');\n    }\n  }, {\n    key: \"onBackCtrlClick\",\n    value: function onBackCtrlClick() {\n      var _this3 = this;\n\n      // get elements for this position\n      var _this$getCurrentData2 = this.getCurrentData(this.currentItemIndex),\n          menuItem = _this$getCurrentData2.menuItem,\n          texts = _this$getCurrentData2.texts,\n          numbers = _this$getCurrentData2.numbers,\n          contentItem = _this$getCurrentData2.contentItem;\n\n      _gsap.gsap.timeline({\n        defaults: {\n          duration: 0.4,\n          ease: 'power3.in'\n        }\n      }).addLabel('hideContent', 0) // set transform origin value for both the texts and content tile elements\n      .set([texts, contentItem.DOM.title], {\n        transformOrigin: '50% 0%'\n      }, 'hideContent') // back control\n      .set(this.DOM.backCtrl, {\n        pointerEvents: 'none'\n      }, 'hideContent').to(this.DOM.backCtrl, {\n        opacity: 0,\n        x: '-100%'\n      }, 'hideContent').to([contentItem.DOM.caption.meta, contentItem.DOM.caption.title], {\n        y: '100%',\n        opacity: 0,\n        stagger: 0.02\n      }, 'hideContent').to(contentItem.DOM.caption.more, {\n        scale: 0,\n        opacity: 0,\n        stagger: 0.02\n      }, 'hideContent').to(contentItem.DOM.imgs, {\n        y: '101%',\n        stagger: 0.02\n      }, 'hideContent+=0.1').to(contentItem.DOM.number, {\n        scale: 0\n      }, 'hideContent+=0.1').to(contentItem.DOM.title, {\n        y: '100%',\n        opacity: 1\n      }, 'hideContent+=0.1').addLabel('showMenu', 0.6) // remove class content--current to the content element so it becomes invisible\n      .add(function () {\n        contentItem.DOM.el.classList.remove('content--current');\n      }, 'showMenu').add(function () {\n        // change pointer events so we can hover on the menu\n        _this3.DOM.menu.style.pointerEvents = '';\n        menuItem.DOM.el.style.pointerEvents = '';\n      }, 'showMenu') // small numbers next to text\n      .to(numbers, {\n        duration: 0.3,\n        ease: 'sine',\n        scale: 1,\n        opacity: 1,\n        stagger: {\n          from: this.currentItemIndex,\n          each: 0.01\n        }\n      }, 'showMenu') // all menu items texts\n      .to(texts, {\n        duration: 0.1,\n        ease: 'quad.in',\n        scaleY: 1.5,\n        opacity: 1,\n        stagger: {\n          from: this.currentItemIndex,\n          each: 0.01\n        }\n      }, 'showMenu').to(texts, {\n        duration: 0.8,\n        ease: 'expo',\n        scaleY: 1,\n        y: '0%',\n        stagger: {\n          from: this.currentItemIndex,\n          each: 0.01\n        }\n      }, 'showMenu+=0.1');\n    }\n  }]);\n\n  return MenuController;\n}();\n\nexports.default = MenuController;"},"sourceMaps":null,"error":null,"hash":"f9714c9960691e1d21a5d56d59bd4bff","cacheData":{"env":{}}}